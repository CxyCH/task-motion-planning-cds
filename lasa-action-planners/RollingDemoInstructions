////////////////////////////////////////
///// COMMUNICATION/VISUALIZATION  /////
///////////////////////////////////////

*****Robot State Communication*****
-> For lasa setup:
Bringup rtk mirror (real robot state monitoring)
$ rosrun rtk_mirror run_lwr.sh

-> For boxy setup:
... Alexis' Job

*****LASA Load robot/table*****
$ roslaunch lwr_bringup lwr_realtime_viz.launch


*****Monitor Forces*****
$ rqt_plot /joint_to_cart/est_ee_ft/wrench/force

*****Monitor robot states/vision/attractors*****
$ rosrun rviz rviz


***** CHECKING JOINT LIMITS ********
$ iai_boxy
///////////////////////
///// PERCEPTION  /////
///////////////////////

*****LASA Launch Kinect Sensor*****
$ roslaunch openni_launch openni.launch


*****Dough Detector Service*****
$ rosrun lasa_perception_module doughDetectorOnLWRService.py

*****Table Detector Service*****
$ roslaunch lasa_perception_module tableDetectorOnLWRService.launch


////////////////////////////////////
///// CONTROL/MOTION PLANNING  /////
////////////////////////////////////

*****Joint to Cartesian Estimation*****
-> For lasa setup:
$ roslaunch state_transformers joint_to_cart_lasa.launch

-> For boxy setup:
$ roslaunch state_transformers joint_to_cart_real_boxy.launch

*****Cartesian to Joint Estimation*****
-> For lasa setup:
$ roslaunch state_transformers cart_to_joint_lasa.launch

-> For boxy setup:
$ roslaunch state_transformers cart_to_joint_real_boxy.launch

*****Trajectory Generator*****
-> For lasa setup w/o vision:
$ roslaunch motion_planner lasa_fixed.launch

-> For boxy setup w/o vision:
$ roslaunch motion_planner boxy_fixed.launch

-> For lasa/boxy setup w/vision:
$ roslaunch motion_planner vision_boxy.launch

//////////////////////////
///// TASK PLANNING  /////
//////////////////////////

*****Sub-Task Action Planner*****
-> For lasa setup w/vision:
$ rosrun lasa_action_planners rolling_demo_lasa.py

-> For boxy setup w/vision:
$ rosrun lasa_action_planners rolling_demo_boxy_v2.py

-> For lasa/boxy simulation w/o vision:
$ rosrun lasa_action_planners rolling_demo_fixed.py



NICE BASE CONFIGURATION:
$ rosrun tf tf_echo /map /base_footprint
At time 1430586796.102
- Translation: [-2.408, 1.416, 0.000]
- Rotation: in Quaternion [0.000, 0.000, -0.044, 0.999]
            in RPY [0.000, 0.000, -0.088]


NICE ARM CONFIGURATION:

name: ['left_arm_0_joint', 'left_arm_1_joint', 'left_arm_2_joint', 'left_arm_3_joint', 'left_arm_4_joint', 'left_arm_5_joint', 'left_arm_6_joint', 'right_arm_0_joint', 'right_arm_1_joint', 'right_arm_2_joint', 'right_arm_3_joint', 'right_arm_4_joint', 'right_arm_5_joint', 'right_arm_6_joint']
position: [-2.8755767345428467, -2.037353754043579, 0.44331642985343933, 0.2515510618686676, 0.015221156179904938, 0.16955767571926117, 1.337767243385315, -0.46117207407951355, -0.36449679732322693, 1.4629453420639038, 1.792398452758789, 1.7107172012329102, 1.4544092416763306, 0.9374868869781494]

....

Frame from Flange(Cabling Adaptor +1cm) to End of Force/Torque Sensor:
rosrun tf tf_echo  /right_arm_flange_link /right_arm_cabling_adaptor_link
- Translation: [0.000, 0.000, 0.010]
- Rotation: in Quaternion [0.000, 0.000, 0.000, 1.000]
            in RPY [0.000, -0.000, 0.000]

rosrun tf tf_echo  /right_arm_cabling_adaptor_link /right_arm_adapter_fwa050_wsg50_frame_out
- Translation: [0.000, 0.000, 0.077]
- Rotation: in Quaternion [0.000, 0.000, 1.000, -0.000]
            in RPY [0.000, -0.000, -3.142]

correct 0.053

Rotation Matrix
[-1 0 0; 0 -1 0; 0 0 1]


